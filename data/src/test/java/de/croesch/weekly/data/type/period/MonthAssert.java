package de.croesch.weekly.data.type.period;

import java.time.LocalDate;
import org.assertj.core.api.AbstractAssert;


/**
 * {@link Month} specific assertions - Generated by CustomAssertionGenerator.
 */
public class MonthAssert extends AbstractAssert<MonthAssert, Month> {

  /**
   * Creates a new <code>{@link MonthAssert}</code> to make assertions on actual Month.
   * @param actual the Month we want to make assertions on.
   */
  public MonthAssert(Month actual) {
    super(actual, MonthAssert.class);
  }

  /**
   * An entry point for MonthAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMonth)</code> and get specific assertion with code completion.
   * @param actual the Month we want to make assertions on.
   * @return a new <code>{@link MonthAssert}</code>
   */
  public static MonthAssert assertThat(Month actual) {
    return new MonthAssert(actual);
  }

  /**
   * Verifies that the actual Month's begin is equal to the given one.
   * @param begin the given begin to compare the actual Month's begin to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Month's begin is not equal to the given one.
   */
  public MonthAssert hasBegin(LocalDate begin) {
    // check that actual Month we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected begin of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LocalDate actualBegin = actual.getBegin();
    if (!org.assertj.core.util.Objects.areEqual(actualBegin, begin)) {
      failWithMessage(assertjErrorMessage, actual, begin, actualBegin);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Month's end is equal to the given one.
   * @param end the given end to compare the actual Month's end to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Month's end is not equal to the given one.
   */
  public MonthAssert hasEnd(LocalDate end) {
    // check that actual Month we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected end of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LocalDate actualEnd = actual.getEnd();
    if (!org.assertj.core.util.Objects.areEqual(actualEnd, end)) {
      failWithMessage(assertjErrorMessage, actual, end, actualEnd);
    }

    // return the current assertion for method chaining
    return this;
  }

}
