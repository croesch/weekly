package de.croesch.weekly.data.type.task;

import java.time.LocalDate;
import org.assertj.core.api.AbstractAssert;


/**
 * {@link OnetimeTask} specific assertions - Generated by CustomAssertionGenerator.
 */
public class OnetimeTaskAssert extends AbstractAssert<OnetimeTaskAssert, OnetimeTask> {

  /**
   * Creates a new <code>{@link OnetimeTaskAssert}</code> to make assertions on actual OnetimeTask.
   * @param actual the OnetimeTask we want to make assertions on.
   */
  public OnetimeTaskAssert(OnetimeTask actual) {
    super(actual, OnetimeTaskAssert.class);
  }

  /**
   * An entry point for OnetimeTaskAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myOnetimeTask)</code> and get specific assertion with code completion.
   * @param actual the OnetimeTask we want to make assertions on.
   * @return a new <code>{@link OnetimeTaskAssert}</code>
   */
  public static OnetimeTaskAssert assertThat(OnetimeTask actual) {
    return new OnetimeTaskAssert(actual);
  }

  /**
   * Verifies that the actual OnetimeTask's description is equal to the given one.
   * @param description the given description to compare the actual OnetimeTask's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OnetimeTask's description is not equal to the given one.
   */
  public OnetimeTaskAssert hasDescription(String description) {
    // check that actual OnetimeTask we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDescription = actual.getDescription();
    if (!org.assertj.core.util.Objects.areEqual(actualDescription, description)) {
      failWithMessage(assertjErrorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual OnetimeTask's dueDate is equal to the given one.
   * @param dueDate the given dueDate to compare the actual OnetimeTask's dueDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual OnetimeTask's dueDate is not equal to the given one.
   */
  public OnetimeTaskAssert hasDueDate(LocalDate dueDate) {
    // check that actual OnetimeTask we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected dueDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    LocalDate actualDueDate = actual.getDueDate();
    if (!org.assertj.core.util.Objects.areEqual(actualDueDate, dueDate)) {
      failWithMessage(assertjErrorMessage, actual, dueDate, actualDueDate);
    }

    // return the current assertion for method chaining
    return this;
  }

}
